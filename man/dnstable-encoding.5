'\" t
.\"     Title: dnstable-encoding
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 05/31/2018
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "DNSTABLE\-ENCODING" "5" "05/31/2018" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dnstable-encoding \- key\-value encoding format used by dnstable
.SH "DESCRIPTION"
.sp
dnstable has been designed to import the data generated by the \fBnmsg\-dns\-cache\fR program in the \fBNMSG SIE/dnsdedupe\fR format\&. See the \fIISC Passive DNS Architecture\fR whitepaper for details about how this data is actually generated\&. The data model used with the aid of this format preserves a number of important properties like Resource Record type transparency and Resource Record set atomicity\&. Additionally, dnstable preserves extra metadata available in the \fBdnsdedupe\fR payloads\&.
.sp
dnstable makes use of the \fBMTBL\fR Sorted String Table (SSTable) format, which provides an immutable mapping of keys to values\&. This format allows fast lookups of key prefixes, so the precise encoding and layout of dnstable keys are chosen to take advantage of this property\&.
.sp
\fBMTBL\fR keys and values are arbitrary byte arrays, and because \fBMTBL\fR keys are stored in sorted order it is possible to look up entire key\-value entries by searching for the initial part of a key\&.
.sp
The first byte of each dnstable key is a \(lqtype\(rq byte, and there are currently four different \(lqtypes\(rq of dnstable key\-value entries which are described below\&. These different types are used to encode the full passive DNS payload as well as \(lqindices\(rq into the payload\&.
.sp
Each dnstable key is a compound key that packs individual fields together, and for the key types that include a value, the value is a compound value that also packs individual fields together\&.
.sp
In the string literals given in the text below, C\-style "\exNN" hex encoding may be used to represent particular byte values\&. For example, "\ex03" is an octet with decimal value 3\&.
.SS "Key\-value entry types"
.sp
All keys and values described below are byte arrays containing packed fields\&. Each field is concatenated together without delimiters\&. The following data types are used:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Byte\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Fixed\-width 16 bit integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Variable\-width integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Wire\-format DNS record data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Wire\-format DNS domain names\&. The domain name
"www\&.example\&.com"
would be encoded as
"\ex03www\ex07example\ex03com\ex00"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Label\-reversed wire\-format DNS domain names\&. The domain name
"www\&.example\&.com"
would be encoded as
"\ex03com\ex07example\ex03www\ex00"\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBENTRY_TYPE_RRSET\fR
.RS 4
.sp
This entry type encodes the complete passive DNS payload\&. The RRset owner name is encoded at the beginning of the key so that \(lqforward\(rq lookups can be performed on the owner name\&. The owner name is also encoded with labels reversed from the usual DNS order to increase locality and allow for wildcard matches\&. (For example, "*\&.example\&.com"\&.)
.sp
The key is a packed tuple consisting of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBType byte\fR\&. The constant
"\ex00"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBRRset owner name\fR\&. Label\-reversed wire\-format DNS domain name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBRRset type\fR\&. Variable\-width integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
\fBBailiwick domain name\fR\&. Label\-reversed wire\-format DNS domain name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
\fBRdata array\fR\&. An array of one or more wire\-format DNS record data values\&. Each record data value is preceded by its length, encoded as a variable\-width integer\&.
.RE
.sp
The value consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBFirst timestamp\fR\&. Variable\-width integer\&. Number of seconds since the epoch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBLast timestamp\fR\&. Variable\-width integer\&. Number of seconds since the epoch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBCount\fR\&. Variable\-width integer\&. Number of observations between the first and last timestamps\&.
.RE
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBENTRY_TYPE_RRSET_NAME_FWD\fR
.RS 4
.sp
This entry type encodes only the RRset owner name in the usual \(lqforward\(rq direction\&. This entry type provides an \(lqindex\(rq into the \fBENTRY_TYPE_RRSET\fR \(lqtable\(rq so that RRsets whose owner names start with a particular subsequence of labels can be found\&. (For example, looking up the label subsequence "www\&.example\&.*" using this index would reveal the existence of the domain names "www\&.example\&.com", "www\&.example\&.net", etc\&.)
.sp
The key consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBType byte\fR\&. The constant
"\ex01"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBRRset owner name\fR\&. Wire\-format DNS domain name\&.
.RE
.sp
There is no value associated with this entry type\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBENTRY_TYPE_RDATA\fR
.RS 4
.sp
This entry type encodes individual Resource Record data values; that is, an RRset containing multiple Resource Records will be encoded as multiple entries in this \(lqtable\(rq\&.
.sp
The key consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBType byte\fR\&. The constant
"\ex02"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBRdata\fR\&. Wire\-format DNS record data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBRR type\fR\&. Variable\-width integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
\fBRR owner name\fR\&. Label\-reversed wire\-format DNS domain name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
\fBRdata length\fR\&. Fixed\-width 16 bit integer\&. Number of bytes in the
\fBRdata\fR
field\&.
.RE
.sp
The \fBRdata length\fR field is encoded at the end of the key so that searches can be performed over the \fBRdata\fR field without needing to know the length of the record data value in advance (or worse, needing to iterate over all possible length values)\&.
.sp
\fBENTRY_TYPE_RDATA\fR is also used to encode an entry sub\-type specifically for MX and SRV DNS records, which contain a DNS domain name offset into the latter part of the record data\&. (An MX record contains a domain name offset 2 octets into the record data value, and a SRV record contains a domain name offset 6 octets into the record data value\&. If the MX and SRV record data types had been laid out with the domain name at the beginning of the record data the following hack would not be necessary in order to make the domain name part of these record types searchable\&.) This sub\-type \(lqslices\(rq the record data so that the domain name in the latter part of the record appears at the beginning of the key and the initial bytes of the record appear just before the \fBRdata length\fR field at the end of the key\&. That is, the key consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBType byte\fR\&. The constant
"\ex02"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBLatter data slice\fR\&. Wire\-format DNS record data\&. This is the latter part of the record data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBRR type\fR\&. Variable\-width integer\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 4.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  4." 4.2
.\}
\fBRR owner name\fR\&. Label\-reversed wire\-format DNS domain name\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 5.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  5." 4.2
.\}
\fBInitial data slice\fR\&. Wire\-format DNS record data\&. This is the initial part of the record data\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 6.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  6." 4.2
.\}
\fBLatter data slice length\fR\&. Fixed\-width 16 bit integer\&. Number of bytes in the
\fBlatter data slice\fR\&. The number of bytes in the
\fBinitial data slice\fR
is implicit\&.
.RE
.sp
The value consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBFirst timestamp\fR\&. Variable\-width integer\&. Number of seconds since the epoch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBLast timestamp\fR\&. Variable\-width integer\&. Number of seconds since the epoch\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
\fBCount\fR\&. Variable\-width integer\&. Number of observations between the first and last timestamps\&.
.RE
.sp
This is the same encoding as the values for \fBENTRY_TYPE_RRSET\fR entries\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBENTRY_TYPE_RDATA_NAME_REV\fR
.RS 4
.sp
This entry type encodes label\-reversed domain names from the record data value for certain DNS record types that contain a domain name in the record data, specifically the NS, CNAME, DNAME, PTR, MX, and SRV DNS record types\&.
.sp
The key consists of the following fields, in order:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
\fBType byte\fR\&. The constant
"\ex03"\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
\fBRdata name\fR\&. Label\-reversed wire\-format DNS domain name\&.
.RE
.sp
There is no value associated with this entry type\&.
.RE
.SH "EXAMPLES"
.sp
This section gives two example RRsets and shows how they would be encoded using the above entry types\&. The first example is an NS delegation RRset for the domain name "example\&.com" and consists of two Resource Records; it will result in the generation of six key\-value entries\&. The second example is an A\-record for the domain name "www\&.isc\&.org" that consists of a single Resource Record; it will result in the generation of three key\-value entries\&.
.sp
In each example entry, a table of the broken down fields in each entry is given, and then the final, concatenated key and value byte strings\&.
.SS "Example 1: example\&.com\&./NS"
.sp
Given the following passive DNS payload:
.TS
allbox tab(:);
ltB ltB.
T{
\fBField\fR
T}:T{
\fBValue\fR
T}
.T&
lt lt
lt lt
lt lt
lt lt
lt lt
lt lt
lt lt
lt lt.
T{
.sp
\fBrrname\fR
T}:T{
.sp
example\&.com\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
NS
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
ns1\&.example\&.com\&.
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
ns2\&.example\&.com\&.
T}
T{
.sp
\fBbailiwick\fR
T}:T{
.sp
com\&.
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
Mon Apr 2 12:33:20 2012
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
Mon Apr 2 15:20:00 2012
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
23
T}
.TE
.sp 1
.sp
The following entries will be generated:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #1 (ENTRY_TYPE_RRSET)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex00"
T}:T{
.sp
ENTRY_TYPE_RRSET
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03com\ex07example\ex00"
T}:T{
.sp
example\&.com\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
NS
T}
T{
.sp
\fBbailiwick\fR
T}:T{
.sp
"\ex03com\ex00"
T}:T{
.sp
com\&.
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex11" "\ex03ns1\ex07example\ex03com\ex00"
T}:T{
.sp
ns1\&.example\&.com\&.
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex11" "\ex03ns2\ex07example\ex03com\ex00"
T}:T{
.sp
ns2\&.example\&.com\&.
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
"\ex90\exb9\exe6\exfb\ex04"
T}:T{
.sp
1333370000 (Mon Apr 2 12:33:20 2012)
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
"\exa0\ex87\exe7\exfb\ex04"
T}:T{
.sp
1333380000 (Mon Apr 2 15:20:00 2012)
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
"\ex17"
T}:T{
.sp
23
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex00\ex03com\ex07example\ex00\ex02\ex03com\ex00\ex11\ex03ns1\ex07example\ex03com\ex00\ex11\ex03ns2\ex07example\ex03com\ex00"
.sp
\fBFinal value\fR:
.sp
"\ex90\exb9\exe6\exfb\ex04\exa0\ex87\exe7\exfb\ex04\ex17"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #2 (ENTRY_TYPE_RRSET_NAME_FWD)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
ENTRY_TYPE_RRSET_NAME_FWD
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex07example\ex03com\ex00"
T}:T{
.sp
example\&.com\&.
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex01\ex07example\ex03com\ex00"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #3 (ENTRY_TYPE_RDATA)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
ENTRY_TYPE_RDATA
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex03ns1\ex07example\ex03com\ex00"
T}:T{
.sp
ns1\&.example\&.com\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
NS
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03com\ex07example\ex00"
T}:T{
.sp
example\&.com\&.
T}
T{
.sp
\fBrdata length\fR
T}:T{
.sp
"\ex00\ex11"
T}:T{
.sp
\fBrdata\fR field is 17 octets long
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
"\ex90\exb9\exe6\exfb\ex04"
T}:T{
.sp
1333370000 (Mon Apr 2 12:33:20 2012)
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
"\exa0\ex87\exe7\exfb\ex04"
T}:T{
.sp
1333380000 (Mon Apr 2 15:20:00 2012)
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
"\ex17"
T}:T{
.sp
23
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex02\ex03ns1\ex07example\ex03com\ex00\ex02\ex03com\ex07example\ex00\ex00\ex11"
.sp
\fBFinal value\fR:
.sp
"\ex90\exb9\exe6\exfb\ex04\exa0\ex87\exe7\exfb\ex04\ex17"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #4 (ENTRY_TYPE_RDATA)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
ENTRY_TYPE_RDATA
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex03ns2\ex07example\ex03com\ex00"
T}:T{
.sp
ns2\&.example\&.com\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
NS
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03com\ex07example\ex00"
T}:T{
.sp
example\&.com\&.
T}
T{
.sp
\fBrdata length\fR
T}:T{
.sp
"\ex00\ex11"
T}:T{
.sp
\fBrdata\fR field is 17 octets long
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
"\ex90\exb9\exe6\exfb\ex04"
T}:T{
.sp
1333370000 (Mon Apr 2 12:33:20 2012)
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
"\exa0\ex87\exe7\exfb\ex04"
T}:T{
.sp
1333380000 (Mon Apr 2 15:20:00 2012)
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
"\ex17"
T}:T{
.sp
23
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex02\ex03ns2\ex07example\ex03com\ex00\ex02\ex03com\ex07example\ex00\ex00\ex11"
.sp
\fBFinal value\fR:
.sp
"\ex90\exb9\exe6\exfb\ex04\exa0\ex87\exe7\exfb\ex04\ex17"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #5 (ENTRY_TYPE_RDATA_NAME_REV)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex03"
T}:T{
.sp
ENTRY_TYPE_RDATA_NAME_REV
T}
T{
.sp
\fBrdata name\fR
T}:T{
.sp
"\ex03com\ex07example\ex03ns1\ex00"
T}:T{
.sp
ns1\&.example\&.com\&.
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex03\ex03com\ex07example\ex03ns1\ex00"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexample.com entry #6 (ENTRY_TYPE_RDATA_NAME_REV)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex03"
T}:T{
.sp
ENTRY_TYPE_RDATA_NAME_REV
T}
T{
.sp
\fBrdata name\fR
T}:T{
.sp
"\ex03com\ex07example\ex03ns2\ex00"
T}:T{
.sp
ns2\&.example\&.com\&.
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex03\ex03com\ex07example\ex03ns2\ex00"
.RE
.SS "Example 2: www\&.isc\&.org\&./A"
.sp
Given the following passive DNS payload:
.TS
allbox tab(:);
ltB ltB.
T{
\fBField\fR
T}:T{
\fBValue\fR
T}
.T&
lt lt
lt lt
lt lt
lt lt
lt lt
lt lt
lt lt.
T{
.sp
\fBrrname\fR
T}:T{
.sp
www\&.isc\&.org\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
A
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
149\&.20\&.64\&.42
T}
T{
.sp
\fBbailiwick\fR
T}:T{
.sp
isc\&.org\&.
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
Mon Apr 2 12:33:20 2012
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
Mon Apr 2 15:20:00 2012
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
1
T}
.TE
.sp 1
.sp
The following entries will be generated:
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwww.isc.org entry #1 (ENTRY_TYPE_RRSET)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex00"
T}:T{
.sp
ENTRY_TYPE_RRSET
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03org\ex03isc\ex03www"
T}:T{
.sp
www\&.isc\&.org\&.
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
A
T}
T{
.sp
\fBbailiwick\fR
T}:T{
.sp
"\ex03org\ex03isc\ex00"
T}:T{
.sp
isc\&.org\&.
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex04" "\ex95\ex14\ex40\ex2a"
T}:T{
.sp
149\&.20\&.64\&.42
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
"\ex90\exb9\exe6\exfb\ex04"
T}:T{
.sp
1333370000 (Mon Apr 2 12:33:20 2012)
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
"\exa0\ex87\exe7\exfb\ex04"
T}:T{
.sp
1333380000 (Mon Apr 2 15:20:00 2012)
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
1
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex00\ex03org\ex03isc\ex03www\ex01\ex03org\ex03isc\ex00\ex04\ex95\ex14\ex40\ex2a"
.sp
\fBFinal value\fR:
.sp
"\ex90\exb9\exe6\exfb\ex04\exa0\ex87\exe7\exfb\ex04\ex01"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwww.isc.org entry #2 (ENTRY_TYPE_RRSET_NAME_FWD)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
ENTRY_TYPE_RRSET_NAME_FWD
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03www\ex03isc\ex03org\ex00"
T}:T{
.sp
www\&.isc\&.org\&.
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex01\ex03www\ex03isc\ex03org\ex00"
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwww.isc.org entry #3 (ENTRY_TYPE_RDATA)\fR
.RS 4
.TS
allbox tab(:);
ltB ltB ltB.
T{
\fBField\fR
T}:T{
\fBData\fR
T}:T{
\fBInterpretation\fR
T}
.T&
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt
lt lt lt.
T{
.sp
\fBtype\fR
T}:T{
.sp
"\ex02"
T}:T{
.sp
ENTRY_TYPE_RDATA
T}
T{
.sp
\fBrdata\fR
T}:T{
.sp
"\ex95\ex14\ex40\ex2a"
T}:T{
.sp
149\&.20\&.64\&.42
T}
T{
.sp
\fBrrtype\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
A
T}
T{
.sp
\fBrrname\fR
T}:T{
.sp
"\ex03org\ex03isc\ex03www\ex00"
T}:T{
.sp
www\&.isc\&.org\&.
T}
T{
.sp
\fBrdata length\fR
T}:T{
.sp
"\ex00\ex04"
T}:T{
.sp
\fBrdata\fR field is 4 octets long
T}
T{
.sp
\fBtime_first\fR
T}:T{
.sp
"\ex90\exb9\exe6\exfb\ex04"
T}:T{
.sp
1333370000 (Mon Apr 2 12:33:20 2012)
T}
T{
.sp
\fBtime_last\fR
T}:T{
.sp
"\exa0\ex87\exe7\exfb\ex04"
T}:T{
.sp
1333380000 (Mon Apr 2 15:20:00 2012)
T}
T{
.sp
\fBcount\fR
T}:T{
.sp
"\ex01"
T}:T{
.sp
1
T}
.TE
.sp 1
.sp
\fBFinal key\fR:
.sp
"\ex02\ex95\ex14\ex40\ex2a\ex01\ex03osc\ex03isc\ex03www\ex00\ex00\ex04"
.sp
\fBFinal value\fR:
.sp
"\ex90\exb9\exe6\exfb\ex04\exa0\ex87\exe7\exfb\ex04\ex01"
.RE
.SH "SEE ALSO"
.sp
\fIISC Passive DNS Architecture\fR, https://www\&.farsightsecurity\&.com/assets/media/download/passive\-dns\-architecture\&.pdf
.sp
\fIGoogle Protocol Buffers Encoding\fR, https://developers\&.google\&.com/protocol\-buffers/docs/encoding, for the base\-128 variable\-width integer encoding used in some of the fields in dnstable keys\&. Also see \fBmtbl_varint\fR(3) for a varint encoding implementation\&.
