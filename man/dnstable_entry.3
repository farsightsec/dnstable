'\" t
.\"     Title: dnstable_entry
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.79.1 <http://docbook.sf.net/>
.\"      Date: 12/05/2019
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "DNSTABLE_ENTRY" "3" "12/05/2019" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dnstable_entry \- dnstable entry objects
.SH "SYNOPSIS"
.sp
\fB#include <dnstable\&.h>\fR
.sp
.nf
\fBtypedef enum {
    \fR\fB\fIDNSTABLE_ENTRY_TYPE_RRSET\fR\fR\fB,
    \fR\fB\fIDNSTABLE_ENTRY_TYPE_RRSET_NAME_FWD\fR\fR\fB,
    \fR\fB\fIDNSTABLE_ENTRY_TYPE_RDATA\fR\fR\fB,
    \fR\fB\fIDNSTABLE_ENTRY_TYPE_RDATA_NAME_REV\fR\fR\fB
} dnstable_entry_type;\fR
.fi
.sp
.nf
\fBtypedef enum {
    \fR\fB\fIdnstable_output_format_json\fR\fR\fB,
    \fR\fB\fIdnstable_output_format_text\fR\fR\fB
} dnstable_output_format_type;\fR
.fi
.sp
.nf
\fBtypedef enum {
    \fR\fB\fIdnstable_date_format_unix, /* timestamps in Unix seconds since the epoch */\fR\fR\fB
    \fR\fB\fIdnstable_date_format_rfc3339 /* timestamps in RFC3339 string form */\fR\fR\fB
} dnstable_date_format_type;\fR
.fi
.sp
.nf
\fBstruct dnstable_entry *
dnstable_entry_decode(
    const uint8_t *\fR\fB\fIkey\fR\fR\fB, size_t \fR\fB\fIlen_key\fR\fR\fB,
    const uint8_t *\fR\fB\fIval\fR\fR\fB, size_t \fR\fB\fIlen_val\fR\fR\fB);\fR
.fi
.sp
.nf
\fBvoid
dnstable_entry_destroy(struct dnstable_entry **\fR\fB\fIent\fR\fR\fB);\fR
.fi
.sp
.nf
\fBchar *
dnstable_entry_to_text(struct dnstable_entry *\fR\fB\fIent\fR\fR\fB);\fR
.fi
.sp
.nf
\fBchar *
dnstable_entry_to_json(struct dnstable_entry *\fR\fB\fIent\fR\fR\fB);\fR
.fi
.sp
.nf
\fBstruct dnstable_formatter *
dnstable_formatter_init();\fR
.fi
.sp
.nf
\fBvoid
dnstable_formatter_destroy(struct dnstable_formatter **\fR\fB\fIfp\fR\fR\fB);\fR
.fi
.sp
.nf
\fBvoid
dnstable_formatter_set_output_format(
    struct dnstable_formatter *\fR\fB\fIf\fR\fR\fB,
    dnstable_output_format_type \fR\fB\fIformat\fR\fR\fB);\fR
.fi
.sp
.nf
\fBvoid
dnstable_formatter_set_date_format(
    struct dnstable_formatter *\fR\fB\fIf\fR\fR\fB,
    dnstable_date_format_type \fR\fB\fIformat\fR\fR\fB);\fR
.fi
.sp
.nf
/* If always_array is true, the rdata is always rendered as an array, even if there is only
   one rdata value\&. Default is false, in which case an rrset with only one rdata value
   will have the rdata rendered as a single string\&. */
\fBvoid
dnstable_formatter_set_rdata_array(
    struct dnstable_formatter *\fR\fB\fIf\fR\fR\fB,
    bool \fR\fB\fIalways_array\fR\fR\fB);\fR
.fi
.sp
.nf
\fBchar *
dnstable_entry_format(
    const struct dnstable_formatter *\fR\fB\fIf\fR\fR\fB,
    const struct dnstable_entry *\fR\fB\fIent\fR\fR\fB);\fR
.fi
.sp
.nf
\fBdnstable_entry_type
dnstable_entry_get_type(struct dnstable_entry *\fR\fB\fIent\fR\fR\fB);\fR
.fi
.sp
.nf
\fBvoid
dnstable_entry_set_iszone(struct dnstable_entry *\fR\fB\fIent\fR\fR\fB, bool \fR\fB\fIiszone\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RRSET_NAME_FWD
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_rrname(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    const uint8_t **\fR\fB\fIowner\fR\fR\fB, size_t *\fR\fB\fIlen_owner\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_rrtype(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    uint16_t *\fR\fB\fIrrtype\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 */
\fBdnstable_res
dnstable_entry_get_bailiwick(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    const uint8_t **\fR\fB\fIbailiwick\fR\fR\fB, size_t *\fR\fB\fIlen_bailiwick\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_num_rdata(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    size_t *\fR\fB\fInum_rdata\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_rdata(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB, size_t idx,
    const uint8_t **\fR\fB\fIrdata\fR\fR\fB, size_t *\fR\fB\fIlen_rdata\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RDATA_NAME_REV
 */
\fBdnstable_res
dnstable_entry_get_rdata_name(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    const uint8_t **\fR\fB\fIrdata_name\fR\fR\fB, size_t *\fR\fB\fIlen_rdata_name\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_time_first(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    uint64_t *\fR\fB\fItime_first\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_time_last(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    uint64_t *\fR\fB\fItime_last\fR\fR\fB);\fR
.fi
.sp
.nf
/* valid for entry types:
 *      DNSTABLE_ENTRY_TYPE_RRSET
 *      DNSTABLE_ENTRY_TYPE_RDATA
 */
\fBdnstable_res
dnstable_entry_get_count(
    struct dnstable_entry *\fR\fB\fIent\fR\fR\fB,
    uint64_t *\fR\fB\fIcount\fR\fR\fB);\fR
.fi
.SH "DESCRIPTION"
.sp
\fBdnstable_entry\fR objects represent the data entries stored in dnstable data files\&. Various dnstable library functions return \fBdnstable_entry\fR objects through the \fBdnstable_iter\fR(3) interface, or they can be created directly by the \fBdnstable_entry_decode\fR() function, which parses raw dnstable\-encoded key/value pairs\&.
.sp
A \fBdnstable_entry\fR object has a particular type which can be retrieved with the \fBdnstable_entry_get_type\fR() function\&. Possible values are enumerated in \fBdnstable_entry_type\fR\&. For details about how each type is encoded, see \fBdnstable\-encoding\fR(5)\&.
.sp
For presentation or interchange purposes, the \fBdnstable_entry_to_text\fR(), \fBdnstable_entry_to_json\fR(), or more general \fBdnstable_entry_format()\fR functions can be used to generate the text or JSON\-encoded form of a \fBdnstable_entry\fR object\&. These functions return a dynamically allocated string which must be \fBfree\fR()\*(Aqd by the caller\&.
.sp
To use the \fBdnstable_entry_format()\fR function, first create a formatter with \fBdnstable_formatter_init()\fR\&. The formatter must be destroyed, eventually, with \fBdnstable_formatter_destroy()\fR\&.
.sp
Use \fBdnstable_formatter_set_output_format()\fR to select an available output format\&.
.sp
Use \fBdnstable_formatter_set_date_format()\fR to select a date format\&.
.sp
Use \fBdnstable_formatter_set_rdata_array()\fR to control if the JSON output format has rdata always as an array\&.
.sp
The default formatter settings are: JSON format, always_array = False, UNIX date format \(em this is identical behavior to \fBdnstable_entry_to_json\fR() function\&.
.sp
The \fBdnstable_entry_set_iszone\fR() function sets or clears a flag if this entry is from a zone file\&. This controls how the timestamp fields are named in the formatted output\&.
.sp
The remaining \fBdnstable_entry_get_*\fR() accessor functions return particular fields of the \fBdnstable_entry\fR object, if present\&. \fBdnstable_res_success\fR will be returned if the entry has the requested field, and \fBdnstable_res_failure\fR if not\&. None of the accessor functions allocate memory\&. For the accessors which return pointers, these pointers are valid as long as the \fBdnstable_entry\fR object is valid\&. For field descriptions, see \fBdnstable\-encoding\fR(5)\&.
.SH "SEE ALSO"
.sp
\fBdnstable\-encoding\fR(5)
