#!/bin/sh

. @abs_top_srcdir@/tests/test.subr

DNSTQ=@abs_top_builddir@/src/dnstable_lookup
DUMP=@abs_top_builddir@/src/dnstable_dump
TESTFILE=@abs_top_srcdir@/tests/test-dns.mtbl
TESTBITMAP=@abs_top_builddir@/tests/test-bitmaps

unset DNSTABLE_SETFILE
export DNSTABLE_FNAME=${TESTFILE}

DNSTABLE_MERGE=@abs_top_builddir@/tests/test-dnstable_merge

#
# If test script is run with dnstable_lookup arguments, perform the lookup
# using JSON format for output.
# Otherwise, run all tests.
#
if [ -n "$*" ]; then
	$DNSTQ -j $*
	exit 0
fi

NL="
"

code=0

test_bitmap() {
	test=$1; shift
	test_command "test_bitmap" $test $TESTBITMAP "$@"
}

test_lookup() {
	test=$1; shift
	file=${DNSTABLE_SETFILE:-${DNSTABLE_FNAME:-no-file}}
	test_command "dnstable_lookup ($(basename ${file}))" $test $DNSTQ "$@"
}

test_dump() {
	test=$1; shift
	test_command dnstable_dump $test $DUMP "$@"
}

##################################################
# Bitmap tests
##################################################

test_bitmap fails -h

test_bitmap matches -e 'A SOA' << EOF
encoding: 000142
EOF

test_bitmap matches -d 000142 << EOF
rrtype = 1 = A
rrtype = 6 = SOA
EOF

test_bitmap matches -e 'A SOA TYPE65534' << EOF
encoding: 000142ff200000000000000000000000000000000000000000000000000000000000000002
EOF

test_bitmap matches -e 'TYPE260' << EOF
encoding: 0401
EOF

test_bitmap matches -d '0401' << EOF
rrtype = 260 = (not assigned)
EOF

test_bitmap fails -e 'A,TYPE260'

test_bitmap matches -d 000142ff200000000000000000000000000000000000000000000000000000000000000002 << EOF
rrtype = 1 = A
rrtype = 6 = SOA
rrtype = 65534 = (not assigned)
EOF

test_bitmap fails -d ff200000000000000000000000000000000000000000000000000000000000000002000142

test_bitmap fails -d 00014000

test_bitmap fails -d 0001400000

test_bitmap fails -d 000140000101

##################################################
# Lookup tests
##################################################

test_lookup matches -j rrset www.example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"A","bailiwick":"example.com.","rdata":["198.51.100.3","198.51.100.4"]}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"AAAA","bailiwick":"example.com.","rdata":["2001:db8::1","2001:db8::2"]}
EOF

test_lookup matches -j rrset www.example.com A << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"A","bailiwick":"example.com.","rdata":["198.51.100.3","198.51.100.4"]}
EOF

# same test again but with default dig presentation output
test_lookup matches  rrset www.example.com A << EOF
;;  bailiwick: example.com.
;;      count: 1
;; first seen: 2018-03-27 10:43:28 -0000
;;  last seen: 2018-03-27 10:43:28 -0000
www.example.com. IN A 198.51.100.3
www.example.com. IN A 198.51.100.4
EOF

# test adding raw output to json
test_lookup contains  -R -j rrset www.example.com A << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"A","bailiwick":"example.com.","rdata":["198.51.100.3","198.51.100.4"],"rdata_raw":["c633640301","c633640401"]}
EOF

# test with bailiwick argument too
test_lookup matches  -j rrset www.example.com A example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"A","bailiwick":"example.com.","rdata":["198.51.100.3","198.51.100.4"]}
EOF

# wrong bailiwick has no results
test_lookup matches  -j rrset www.example.com A example.ORG << EOF
EOF

test_lookup matches  -j rrset www.example.com AAAA << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"AAAA","bailiwick":"example.com.","rdata":["2001:db8::1","2001:db8::2"]}
EOF

test_lookup matches  -j rrset example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"SOA","bailiwick":"example.com.","rdata":["hidden-master.example.com. hostmaster.example.com. 2018032701 30 30 86400 300"]}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","bailiwick":"example.com.","rdata":["10 mail.example.com.","20 mail2.example.com."]}
EOF

test_lookup matches  -j rrset example.com NS << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

test_lookup matches  -j rrset example.com SOA << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"SOA","bailiwick":"example.com.","rdata":["hidden-master.example.com. hostmaster.example.com. 2018032701 30 30 86400 300"]}
EOF

test_lookup matches  -j rrset example.com MX << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","bailiwick":"example.com.","rdata":["10 mail.example.com.","20 mail2.example.com."]}
EOF

test_lookup matches  -j rrset _ldap._tcp.example.com SRV << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","bailiwick":"example.com.","rdata":["10 1 389 ldap.example.com."]}
EOF

# offset first five entries, left wildcard rrset lookup
test_lookup matches  -j -O 5 rrset \*.example.com. << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","bailiwick":"example.com.","rdata":["10 1 389 ldap.example.com."]}
EOF

# offset first entry, right wildcard rrset lookup
test_lookup matches  -j -O 1 rrset www.example.\* << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"AAAA","bailiwick":"example.com.","rdata":["2001:db8::1","2001:db8::2"]}
EOF

# offset 1000 entries should have no result
test_lookup matches  -j -O 1000 rrset www.example.\* << EOF
EOF

test_lookup matches  -j rdata ip 198.51.100.3 << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"A","rdata":"198.51.100.3"}
EOF

test_lookup matches  -j rdata ip 2001:db8::1 << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"AAAA","rdata":"2001:db8::1"}
EOF

# offset first entry, rdata ip subnet lookup
test_lookup matches  -j -O 1 rdata ip 2001:db8::/64 << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"www.example.com.","rrtype":"AAAA","rdata":"2001:db8::2"}
EOF

test_lookup matches  -j rdata name ns1.example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","rdata":"ns1.example.com."}
EOF

test_lookup matches  -j rdata name \*.example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","rdata":"ns1.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","rdata":"ns2.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","rdata":"10 1 389 ldap.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"10 mail.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"SOA","rdata":"hidden-master.example.com. hostmaster.example.com. 2018032701 30 30 86400 300"}
EOF

test_lookup matches  -j rdata name hidden-master.example.com SOA << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"SOA","rdata":"hidden-master.example.com. hostmaster.example.com. 2018032701 30 30 86400 300"}
EOF

test_lookup matches  -j rdata name \*.example.com SOA << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"SOA","rdata":"hidden-master.example.com. hostmaster.example.com. 2018032701 30 30 86400 300"}
EOF

test_lookup matches  -j rdata name ldap.example.com << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","rdata":"10 1 389 ldap.example.com."}
EOF

test_lookup matches  -j rdata raw 00 SRV << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","rdata":"10 1 389 ldap.example.com."}
EOF

test_lookup matches  -j rdata raw 00 MX << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"10 mail.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
EOF

test_lookup matches  -j -O 1 rdata raw 00 MX << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
EOF

test_lookup matches  -j version << EOF
{"entry_type":"rrset","version":0}
{"entry_type":"rrset_name","version":1}
{"entry_type":"rdata","version":1}
{"entry_type":"rdata_name","version":1}
EOF

test_lookup matches  -j version rdata << EOF
{"entry_type":"rdata","version":1}
EOF

test_lookup matches  -j time_range << EOF
{"time_first":1522147408,"time_last":1522147408}
EOF

# -u unaggregated results mode requires DNSTABLE_SETFILE set
test_lookup fails -j -u rdata raw 00 MX

test_lookup fails -h
test_lookup fails version toomanyargs toomanyargs
test_lookup fails -O 10 version
test_lookup fails -R version
test_lookup fails time_range toomanyargs
test_lookup fails -O 10 time_range
test_lookup fails -R time_range
test_lookup fails -R rrset www.example.com A
test_lookup fails rdata ip ThisIsNotAnIP

# query_iter_next_ip tests
test_lookup matches -j rdata ip 192.168.1.0/24 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"a.next_ip.dom.","rrtype":"A","rdata":"192.168.1.1"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"a.next_ip.","rrtype":"A","rdata":"192.168.1.1"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"b.next_ip.dom.","rrtype":"A","rdata":"192.168.1.2"}
EOF

test_lookup matches -j rdata ip 192.168.1.1 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"a.next_ip.dom.","rrtype":"A","rdata":"192.168.1.1"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"a.next_ip.","rrtype":"A","rdata":"192.168.1.1"}
EOF

test_lookup matches -j rdata ip 192.168.1.2 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"b.next_ip.dom.","rrtype":"A","rdata":"192.168.1.2"}
EOF

# query for IPv6 prefix to exercise short skip case.
test_lookup matches -j rdata ip c0a8:0100::/24 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-0.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-2.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:100::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-3.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:100:400::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-4.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:103:636f:6d00::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-5.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:103:646f:6d00::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-6.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:103:646f:6d20::"}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"aaaa-7.next_ip.dom.","rrtype":"AAAA","rdata":"c0a8:101:103:646f:6d80::"}
EOF

# all-ones address query, both prefix and point form.
test_lookup matches -j rdata ip 255.255.255.255 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"c.next_ip.dom.","rrtype":"A","rdata":"255.255.255.255"}
EOF

test_lookup matches -j rdata ip 255.255.255.255/32 <<EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"c.next_ip.dom.","rrtype":"A","rdata":"255.255.255.255"}
EOF

#####################

# tests using set file pointing to mtbl files
export DNSTABLE_SETFILE=@abs_top_srcdir@/tests/test-dns.setfile
unset DNSTABLE_FNAME

test_lookup matches  -j -u rdata raw 00 MX << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"10 mail.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"10 mail.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
EOF

test_lookup matches  -j -O 2 -u rdata raw 00 MX << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
EOF

test_lookup matches  -J -O 2 -u rdata raw 00 MX << EOF
{"count":1,"time_first":"2018-03-27T10:43:28Z","time_last":"2018-03-27T10:43:28Z","rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
{"count":1,"time_first":"2018-03-27T10:43:28Z","time_last":"2018-03-27T10:43:28Z","rrname":"example.com.","rrtype":"MX","rdata":"20 mail2.example.com."}
EOF

# test negative offset
test_lookup fails -J -O -1 -u rdata raw 00 MX

# test no search query
test_lookup fails -J -O 2

# test both -j and -J
test_lookup fails -J -j -O 2 -u rdata raw 00 MX

# missing rrset arguments
test_lookup fails rrset

# too many rrset arguments
test_lookup fails rrset www.example.org A example.org thisisextra

# for rrset, slash / is not allowed in owner name
test_lookup fails rrset www/example.org

# using unknown rdata subtype will fail
test_lookup fails rdata junk foo

# using unknown query type will fail
test_lookup fails junk foo bar

# rrset test using unknown RRTYPE mnemonic will fail
test_lookup fails rrset www.example.org BOGUSTYPE example.org

# rdata raw test using unknown RRTYPE mnemonic will fail
test_lookup fails rdata raw 00 BOGUSTYPE

#####################

# environment variable must be set
unset DNSTABLE_SETFILE
unset DNSTABLE_FNAME
test_lookup fails rrset www.example.org A

#####################

# test for DNSTABLE_FNAME set to bogus filename
export DNSTABLE_FNAME=@abs_top_srcdir@/tests/this-does-not-exist
test_lookup fails rrset www.example.org A

#####################

# test suppression of version entries with empty values
export DNSTABLE_FNAME=@abs_top_srcdir@/tests/empty-version.mtbl
test_lookup matches  -j version << EOF
EOF

test_lookup matches  -j time_range << EOF
EOF

# test suppression of version entries merged with empty-valued
# entries.
export DNSTABLE_SETFILE=@abs_top_srcdir@/tests/empty-version.setfile
unset DNSTABLE_FNAME
test_lookup matches  -j version << EOF
EOF

test_lookup matches  -j time_range << EOF
EOF

##################################################
# Dump tests
##################################################

test_dump contains --rrset_full $TESTFILE << EOF
;;  bailiwick: example.com.
EOF

test_dump contains -j --rrset_full $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

test_dump contains --rdata_full $TESTFILE << EOF
_ldap._tcp.example.com. IN SRV 10 1 389 ldap.example.com.
EOF

test_dump contains -j --rdata_full $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","rdata":"10 1 389 ldap.example.com."}
EOF

test_dump contains -j -R -r $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."],"rdata_raw":["036e7331076578616d706c6503636f6d0002","036e7332076578616d706c6503636f6d0002"]}
EOF

test_dump contains -j -R --rdata_full $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"_ldap._tcp.example.com.","rrtype":"SRV","rdata":"10 1 389 ldap.example.com.","rdata_raw":"000a00010185046c646170076578616d706c6503636f6d00"}
EOF

test_dump contains -r $TESTFILE << EOF
;;  bailiwick: example.com.
EOF

test_dump contains -j -r $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

test_dump contains -r -j $TESTFILE << EOF
{"count":1,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

test_dump fails -R --rrset_full $TESTFILE

test_dump fails -h $TESTFILE

test_dump fails -j -R $TESTFILE

test_dump fails -j -R $TESTFILE

test_dump fails --time_range

test_dump matches --time_range $TESTFILE << EOF
;; Earliest time_first: 2018-03-27 10:43:28 -0000
;; Latest time_last: 2018-03-27 10:43:28 -0000
EOF

test_dump matches --time_range -j $TESTFILE << EOF
{"time_first":1522147408,"time_last":1522147408}
EOF

test_dump fails -R --time_range -j $TESTFILE

test_dump fails --version

test_dump contains --version $TESTFILE << EOF
;; Version type rrset: 0
EOF

test_dump contains --version -j $TESTFILE << EOF
{"entry_type":"rrset","version":0}
EOF

test_dump fails -R --version -j $TESTFILE

test_dump contains --rrset_names $TESTFILE << EOF
www.example.com. RRtypes=[A AAAA]  ;; rrset name fwd
EOF

test_dump contains -j --rrset_names $TESTFILE << EOF
{"rrset_name":"www.example.com.","rrtypes":["A","AAAA"]}
EOF

test_dump contains --rdata_names $TESTFILE << EOF
ns1.example.com. RRtypes=[NS]  ;; rdata name rev
EOF

test_dump contains -j --rdata_names $TESTFILE << EOF
{"rdata_name":"ns1.example.com.","rrtypes":["NS"]}
EOF

test_dump fails -R -j --rdata_names $TESTFILE

##################################################
# Test dnstable_merge with ENTRY_TYPE_TIME_RANGE and ENTRY_TYPE_VERSION entries
##################################################

TEMPOUT=@abs_top_builddir@/tests/test-out.mtbl

$DNSTABLE_MERGE $TESTFILE $TESTFILE $TEMPOUT

test_dump matches --time_range -j $TEMPOUT << EOF
{"time_first":1522147408,"time_last":1522147408}
EOF

test_dump contains --version -j $TEMPOUT << EOF
{"entry_type":"rrset","version":0}
EOF

# this should be the same output as the above test
#   test_dump contains -j --rrset_full $TESTFILE
# except the count is doubled.
test_dump contains -j --rrset_full $TEMPOUT << EOF
{"count":2,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

rm -f $TEMPOUT

##################################################
# Test dnstable_merge with old mtbl format without time range nor version
##################################################

$DNSTABLE_MERGE ${TESTFILE}.old ${TESTFILE}.old $TEMPOUT

# just pass-through so no time range entry
test_dump matches --time_range -j $TEMPOUT << EOF
EOF

# just pass-through so no version entry
test_dump matches --version -j $TEMPOUT << EOF
EOF

# this should be the same output as above test with the count doubled
#   test_dump_leading_match -j --rrset_full $TESTFILE
test_dump contains -j --rrset_full $TEMPOUT << EOF
{"count":2,"time_first":1522147408,"time_last":1522147408,"rrname":"example.com.","rrtype":"NS","bailiwick":"example.com.","rdata":["ns1.example.com.","ns2.example.com."]}
EOF

rm -f $TEMPOUT

test_finish
